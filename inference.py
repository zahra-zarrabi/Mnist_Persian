# -*- coding: utf-8 -*-
"""inference.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19tZiU1vN3VC1IzdzgEhFdcTaN62YxtVP
"""

import torch
import torchvision
from torchvision import transforms
import argparse
from Model import Model
import cv2
import numpy as np

my_parser = argparse.ArgumentParser()
my_parser.add_argument('--device',default='cpu', type=str)
my_parser.add_argument('--model_path', type=str)
my_parser.add_argument('--image_path', type=str)
args=my_parser.parse_args()

transform = transforms.Compose([
                                # transforms.RandomRotation(10),
                                transforms.Resize((70,70)),
                                transforms.ToTensor()
                                # transforms.Normalize((0.485,0.456,0.406),(0.229,0.224,0.225))
])

device = torch.device('cuda' if torch.cuda.is_available() and args.device=='GPU' else 'cpu')
model = Model().to(device)

model.load_state_dict(torch.load(args.model_path ,map_location=torch.device(args.device)))

model.eval()
img = cv2.imread(args.image_path)
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
img = cv2.resize(img, (70, 70))

from PIL import Image
PIL_image = Image.fromarray(img)

tensor = transform(PIL_image).unsqueeze(0).to(device)

# process
pred = model(tensor)

# postprocess
pred = pred.cpu().detach().numpy()
pred = np.argmax(pred)

print('prediction:',pred)